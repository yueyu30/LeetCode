//我的代码
//73.48% 96.52%
class MapSum {
    unordered_map<string, int> map;
public:
    MapSum() {
        
    }
    
    void insert(string key, int val) {
        map[key] = val;
    }

    bool string_cmp(string key, string prefix){
        if(prefix.length() > key.length())return false;
        for(int i = 0; i < prefix.length(); i++){
            if(prefix[i] != key[i])return false;
        }
        return true;
    }
    
    int sum(string prefix) {
        int ans = 0;
        for(auto iter = map.begin(); iter != map.end(); iter++){
            if(string_cmp(iter->first, prefix)){
                ans += iter->second;
            }
        }
        return ans;
    }
};

/**
 * Your MapSum object will be instantiated and called as such:
 * MapSum* obj = new MapSum();
 * obj->insert(key,val);
 * int param_2 = obj->sum(prefix);
 */
 //前缀树
 class Trie{
public:
    Trie* next[26];
    int val;
    Trie(){
        this->val = 0;
        for(int i = 0; i < 26; i++){
            this->next[i] = NULL;
        }
    }
};
class MapSum {
    unordered_map<string,int> map;
    Trie* head = new Trie();
public:
    MapSum() {

    }
    
    void insert(string key, int val) {
        Trie* p = head;
        int delta = val;
        if(map.count(key))delta -= map[key];
        map[key] = val;
        for(int i = 0; i < key.length(); i++){
            char c = key[i];
            if(!p->next[c - 'a']){
                p->next[c - 'a'] = new Trie();
            }
            p = p->next[c - 'a'];
            p->val += delta;
        }
    }
    
    int sum(string prefix) {
        Trie* p = head;
        for(char c : prefix){
            if(!p->next[c - 'a'])return 0;
            p = p->next[c - 'a'];
        }
        return p->val;
    }
};
