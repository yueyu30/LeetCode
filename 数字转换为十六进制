//100% 6.89%
class Solution {
public:
string toHex(int num) {
    string result;                                                              //最终结果
    for (int i = 31; i >= 0; i--) {                                         
        (num >> i & 1) == 0 ? result.append(1, '0') : result.append(1, '1');    //先将其转换为二进制
    }
    for (int i = 0; i < 8; i++) {                                               //将其转换为十六进制
        int num = 0;
        for (int p = 0; p < 4; p++) {
            result[i + p] == '1' ? num += pow(2, 3 - p) : num += 0;             //每四位一组，将二进制数算出
        }
        char c;
        c = num + (num >= 10 ? -10 + 'a' : '0');
        string temp;
        temp.append(1, c);
        result.insert(i + 4, temp);
        result.erase(i, 4);
    }
    for (int i = 0; i < 8; i++) {                                               //去除前置0
        if (result[0] == '0') {
            if (i == 7)break;
            result.erase(0, 1);
        }
        else break;
    }
    return result;
}
};
//官方题解
class Solution {
public:
    string toHex(int num) {
        if (num == 0) {
            return "0";
        }
        string sb;
        for (int i = 7; i >= 0; i --) {
            int val = (num >> (4 * i)) & 0xf;                                             //获得每一组的数
            if (sb.length() > 0 || val > 0) {                                             //去除前置0
                char digit = val < 10 ? (char) ('0' + val) : (char) ('a' + val - 10);
                sb.push_back(digit);
            }
        }
        return sb;
    }
};
