//题目要求不将整数转换为string类型
//时间复杂度O(n)
//69.03% 20.98%
class Solution {
public:
bool isPalindrome(int x) {
    if (x < 0)return false;
    if (x < 10)return true;                                           //排除特殊情况
    int length = 10;                                                  //x的数量级
    int times = 2;                                                    //循环次数
    while (INT_MAX / length > 10 && x / (length * 10) != 0) {       
        length *= 10;
        times++;
    }
    for (int i = 10; times > 1; i *= 10,times -= 2) {
        int high = x / (length / i * 10) % 10;                        //从高位开始数
        int low = x % i / (i / 10);                                   //从低位开始数
        if (high != low)return false;
    }
    return true;
}
};
//官方题解
//将数的一半反转相比较
class Solution {
public:
    bool isPalindrome(int x) {
        // 特殊情况：
        // 如上所述，当 x < 0 时，x 不是回文数。
        // 同样地，如果数字的最后一位是 0，为了使该数字为回文，
        // 则其第一位数字也应该是 0
        // 只有 0 满足这一属性
        if (x < 0 || (x % 10 == 0 && x != 0)) {
            return false;
        }

        int revertedNumber = 0;
        while (x > revertedNumber) {
            revertedNumber = revertedNumber * 10 + x % 10;
            x /= 10;
        }

        // 当数字长度为奇数时，我们可以通过 revertedNumber/10 去除处于中位的数字。
        // 例如，当输入为 12321 时，在 while 循环的末尾我们可以得到 x = 12，revertedNumber = 123，
        // 由于处于中位的数字不影响回文（它总是与自己相等），所以我们可以简单地将其去除。
        return x == revertedNumber || x == revertedNumber / 10;
    }
};
