//哈希表
//我们可以用一个哈希表统计 ss 所有长度为10的子串的出现次数
//代码实现时，可以一边遍历子串一边记录答案，为了不重复记录答案，我们只统计当前出现次数为 2 的子串
class Solution {
    const int L = 10;
public:
    vector<string> findRepeatedDnaSequences(string s) {
        vector<string> ans;
        unordered_map<string, int> cnt;
        int n = s.length();
        for (int i = 0; i <= n - L; ++i) {
            string sub = s.substr(i, L);
            if (++cnt[sub] == 2) {
                ans.push_back(sub);
            }
        }
        return ans;
    }
};
//哈希表+滑动窗口
/*由于 ss 中只含有 4 种字符，我们可以将每个字符用 2 个比特表示，即：

{A} 表示为二进制 {00}；
{C} 表示为二进制 {01}；
{G} 表示为二进制 {10}；
{T} 表示为二进制 {11}。
如此一来，一个长为 10 的字符串就可以用 20 个比特表示，而一个 {int} 整数有 32 个比特，足够容纳该字符串，因此我们可以将 ss 的每个长为 10 的子串用一个 {int} 整数表示（只用低 20 位）。

注意到上述字符串到整数的映射是一一映射，每个整数都对应着一个唯一的字符串，因此我们可以将方法一中的哈希表改为存储每个长为 10 的子串的整数表示。

如果我们对每个长为 10 的子串都单独计算其整数表示，那么时间复杂度仍然和方法一一样为 O(NL)。为了优化时间复杂度，我们可以用一个大小固定为 10 的滑动窗口来计算子串的整数表示。设当前滑动窗口对应的整数表示为 x，当我们要计算下一个子串时，就将滑动窗口向右移动一位，此时会有一个新的字符进入窗口，以及窗口最左边的字符离开窗口，这些操作对应的位运算，按计算顺序表示如下：

滑动窗口向右移动一位：x = x << 2，由于每个字符用 2 个比特表示，所以要左移 2 位；
一个新的字符 {ch} 进入窗口：x = x | bin[ch]，这里 \{bin}[{ch}]bin[ch] 为字符 {ch}ch 的对应二进制；
窗口最左边的字符离开窗口：x = x & ((1 << 20) - 1)，由于我们只考虑 x 的低 20 位比特，需要将其余位置零，即与上 (1 << 20) - 1。
将这三步合并，就可以用 O(1) 的时间计算出下一个子串的整数表示，即 x = ((x << 2) | bin[ch]) & ((1 << 20) - 1)
*/
class Solution {
    const int L = 10;
public:
    vector<string> findRepeatedDnaSequences(string s) {
        vector<string> ans;
        unordered_map<string, int> cnt;
        int n = s.length();
        for (int i = 0; i <= n - L; ++i) {
            string sub = s.substr(i, L);
            if (++cnt[sub] == 2) {
                ans.push_back(sub);
            }
        }
        return ans;
    }
};
复杂度分析

时间复杂度：O(NL)O(NL)，其中 NN 是字符串 \textit{s}s 的长度，L=10L=10 即目标子串的长度。

空间复杂度：O(NL)O(NL)。

方法二：哈希表 + 滑动窗口 + 位运算
由于 ss 中只含有 44 种字符，我们可以将每个字符用 22 个比特表示，即：

\texttt{A}A 表示为二进制 \texttt{00}00；
\texttt{C}C 表示为二进制 \texttt{01}01；
\texttt{G}G 表示为二进制 \texttt{10}10；
\texttt{T}T 表示为二进制 \texttt{11}11。
如此一来，一个长为 1010 的字符串就可以用 2020 个比特表示，而一个 \texttt{int}int 整数有 3232 个比特，足够容纳该字符串，因此我们可以将 ss 的每个长为 1010 的子串用一个 \texttt{int}int 整数表示（只用低 2020 位）。

注意到上述字符串到整数的映射是一一映射，每个整数都对应着一个唯一的字符串，因此我们可以将方法一中的哈希表改为存储每个长为 1010 的子串的整数表示。

如果我们对每个长为 1010 的子串都单独计算其整数表示，那么时间复杂度仍然和方法一一样为 O(NL)O(NL)。为了优化时间复杂度，我们可以用一个大小固定为 1010 的滑动窗口来计算子串的整数表示。设当前滑动窗口对应的整数表示为 xx，当我们要计算下一个子串时，就将滑动窗口向右移动一位，此时会有一个新的字符进入窗口，以及窗口最左边的字符离开窗口，这些操作对应的位运算，按计算顺序表示如下：

滑动窗口向右移动一位：x = x << 2，由于每个字符用 22 个比特表示，所以要左移 22 位；
一个新的字符 \textit{ch}ch 进入窗口：x = x | bin[ch]，这里 \textit{bin}[\textit{ch}]bin[ch] 为字符 \textit{ch}ch 的对应二进制；
窗口最左边的字符离开窗口：x = x & ((1 << 20) - 1)，由于我们只考虑 xx 的低 2020 位比特，需要将其余位置零，即与上 (1 << 20) - 1。
将这三步合并，就可以用 O(1)O(1) 的时间计算出下一个子串的整数表示，即 x = ((x << 2) | bin[ch]) & ((1 << 20) - 1)。

Python3C++JavaC#GolangJavaScript

class Solution {
    const int L = 10;
    unordered_map<char, int> bin = {{'A', 0}, {'C', 1}, {'G', 2}, {'T', 3}};
public:
    vector<string> findRepeatedDnaSequences(string s) {
        vector<string> ans;
        int n = s.length();
        if (n <= L) {
            return ans;
        }
        int x = 0;
        for (int i = 0; i < L - 1; ++i) {
            x = (x << 2) | bin[s[i]];
        }
        unordered_map<int, int> cnt;
        for (int i = 0; i <= n - L; ++i) {
            x = ((x << 2) | bin[s[i + L - 1]]) & ((1 << (L * 2)) - 1);
            if (++cnt[x] == 2) {
                ans.push_back(s.substr(i, L));
            }
        }
        return ans;
    }
};
